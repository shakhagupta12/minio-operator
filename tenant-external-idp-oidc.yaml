apiVersion: v1
kind: Namespace
metadata:
  name: tenant-external-idp-oidc
---
apiVersion: v1
data:
  config.env: ZXhwb3J0IE1JTklPX1JPT1RfVVNFUj0ibWluaW8iCmV4cG9ydCBNSU5JT19ST09UX1BBU1NXT1JEPSJtaW5pbzEyMyIKZXhwb3J0IE1JTklPX1NUT1JBR0VfQ0xBU1NfU1RBTkRBUkQ9IkVDOjIiCmV4cG9ydCBNSU5JT19CUk9XU0VSPSJvbiI=
kind: Secret
metadata:
  name: storage-configuration
  namespace: tenant-external-idp-oidc
type: Opaque
---
apiVersion: v1
data:
  accessKey: ""
  secretKey: ""
kind: Secret
metadata:
  name: storage-creds-secret
  namespace: tenant-external-idp-oidc
type: Opaque
---
apiVersion: v1
data:
  CONSOLE_ACCESS_KEY: Y29uc29sZQ==
  CONSOLE_SECRET_KEY: Y29uc29sZTEyMw==
kind: Secret
metadata:
  name: storage-user
  namespace: tenant-external-idp-oidc
type: Opaque
---
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"
  labels:
    app: minio
  name: storage-external-idp-oidc
  namespace: tenant-external-idp-oidc
spec:
  certConfig: {}
  configuration:
    name: storage-configuration
  credsSecret:
    name: storage-creds-secret
  env:
  - name: MINIO_IDENTITY_OPENID_CONFIG_URL
    value: https://your-extenal-idp.com/.well-known/openid-configuration
  - name: MINIO_IDENTITY_OPENID_CLIENT_ID
    value: OPENID CLIENT ID
  - name: MINIO_IDENTITY_OPENID_CLIENT_SECRET
    value: OPENID CLIENT SECRET
  - name: MINIO_IDENTITY_OPENID_SCOPES
    value: openid,profile,email
  - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
    value: https://min.io/policy
  externalCaCertSecret: []
  externalCertSecret: []
  image: minio/minio:RELEASE.2021-09-15T04-54-25Z
  imagePullSecret: {}
  log:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    audit:
      diskCapacityGB: 10
    db:
      affinity:
        nodeAffinity: {}
        podAffinity: {}
        podAntiAffinity: {}
      annotations: {}
      image: ""
      initimage: ""
      labels: {}
      nodeSelector: {}
      resources: {}
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      serviceAccountName: ""
      tolerations: []
      volumeClaimTemplate:
        metadata: {}
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
          storageClassName: standard
    image: ""
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ""
    tolerations: []
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    servers: 4
    tolerations: []
    volumeClaimTemplate:
      apiVersion: v1
      kind: persistentvolumeclaims
      metadata: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Ti
        storageClassName: standard
      status: {}
    volumesPerServer: 4
  priorityClassName: ""
  prometheus:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    diskCapacityGB: 10
    image: ""
    initimage: ""
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ""
    sidecarimage: ""
    storageClassName: standard
  requestAutoCert: true
  s3:
    bucketDNS: false
  serviceAccountName: ""
  serviceMetadata:
    consoleServiceAnnotations: {}
    consoleServiceLabels: {}
    minioServiceAnnotations: {}
    minioServiceLabels: {}
  subPath: ""
  users:
  - name: storage-user
