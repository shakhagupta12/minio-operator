apiVersion: v1
kind: Namespace
metadata:
  name: tenant-external-idp-ldap
---
apiVersion: v1
data:
  billy.ldif: |
    # LDIF fragment to create group branch under root
    dn: uid=billy,dc=example,dc=org
    uid: billy
    cn: billy
    sn: 3
    objectClass: top
    objectClass: posixAccount
    objectClass: inetOrgPerson
    loginShell: /bin/bash
    homeDirectory: /home/billy
    uidNumber: 14583102
    gidNumber: 14564100
    userPassword: billy123
    mail: billy@example.org
    gecos: Billy User

    # Create base group
    dn: ou=groups,dc=example,dc=org
    objectclass:organizationalunit
    ou: groups
    description: generic groups branch

    # create consoleAdmin group (this already exists on minio and have a policy of s3::*)
    dn: cn=consoleAdmin,ou=groups,dc=example,dc=org
    objectClass: top
    objectClass: posixGroup
    gidNumber: 678

    # Assing group to new user
    dn: cn=consoleAdmin,ou=groups,dc=example,dc=org
    changetype: modify
    add: memberuid
    memberuid: billy
kind: ConfigMap
metadata:
  name: billy-ldif
  namespace: tenant-external-idp-ldap
---
apiVersion: v1
data:
  config.env: ZXhwb3J0IE1JTklPX1JPT1RfVVNFUj0ibWluaW8iCmV4cG9ydCBNSU5JT19ST09UX1BBU1NXT1JEPSJtaW5pbzEyMyIKZXhwb3J0IE1JTklPX1NUT1JBR0VfQ0xBU1NfU1RBTkRBUkQ9IkVDOjIiCmV4cG9ydCBNSU5JT19CUk9XU0VSPSJvbiI=
kind: Secret
metadata:
  name: storage-configuration
  namespace: tenant-external-idp-ldap
type: Opaque
---
apiVersion: v1
data:
  accessKey: ""
  secretKey: ""
kind: Secret
metadata:
  name: storage-creds-secret
  namespace: tenant-external-idp-ldap
type: Opaque
---
apiVersion: v1
data:
  CONSOLE_ACCESS_KEY: dWlkPWJpbGx5LGRjPWV4YW1wbGUsZGM9b3Jn
  CONSOLE_SECRET_KEY: ""
kind: Secret
metadata:
  name: storage-user
  namespace: tenant-external-idp-ldap
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: openldap
  name: openldap
  namespace: tenant-external-idp-ldap
spec:
  ports:
  - name: tcp-ldap
    port: 389
    targetPort: tcp-ldap
  - name: tcp-ldap2
    port: 636
    targetPort: tcp-ldap2
  selector:
    app: openldap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openldap
  namespace: tenant-external-idp-ldap
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openldap
  template:
    metadata:
      labels:
        app: openldap
    spec:
      containers:
      - image: osixia/openldap:1.3.0
        imagePullPolicy: IfNotPresent
        name: openldap
        ports:
        - containerPort: 389
          name: tcp-ldap
        - containerPort: 636
          name: tcp-ldap2
        volumeMounts:
        - mountPath: /tmp/billy.ldif
          name: billy-configuration
          subPath: billy.ldif
      volumes:
      - configMap:
          name: billy-ldif
        name: billy-configuration
---
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"
  labels:
    app: minio
  name: storage-external-idp-ldap
  namespace: tenant-external-idp-ldap
spec:
  certConfig: {}
  configuration:
    name: storage-configuration
  credsSecret:
    name: storage-creds-secret
  env:
  - name: MINIO_IDENTITY_LDAP_SERVER_ADDR
    value: openldap.tenant-external-idp-ldap.svc.cluster.local:389
  - name: MINIO_IDENTITY_LDAP_USERNAME_FORMAT
    value: uid=%s,dc=example,dc=org
  - name: MINIO_IDENTITY_LDAP_USERNAME_SEARCH_FILTER
    value: (|(objectclass=posixAccount)(uid=%s))
  - name: MINIO_IDENTITY_LDAP_TLS_SKIP_VERIFY
    value: "on"
  - name: MINIO_IDENTITY_LDAP_SERVER_INSECURE
    value: "on"
  externalCaCertSecret: []
  externalCertSecret: []
  image: minio/minio:RELEASE.2021-09-15T04-54-25Z
  imagePullSecret: {}
  log:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    audit:
      diskCapacityGB: 10
    db:
      affinity:
        nodeAffinity: {}
        podAffinity: {}
        podAntiAffinity: {}
      annotations: {}
      image: ""
      initimage: ""
      labels: {}
      nodeSelector: {}
      resources: {}
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      serviceAccountName: ""
      tolerations: []
      volumeClaimTemplate:
        metadata: {}
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
          storageClassName: standard
    image: ""
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ""
    tolerations: []
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    servers: 4
    tolerations: []
    volumeClaimTemplate:
      apiVersion: v1
      kind: persistentvolumeclaims
      metadata: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Ti
        storageClassName: standard
      status: {}
    volumesPerServer: 4
  priorityClassName: ""
  prometheus:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    diskCapacityGB: 10
    image: ""
    initimage: ""
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ""
    sidecarimage: ""
    storageClassName: standard
  requestAutoCert: true
  s3:
    bucketDNS: false
  serviceAccountName: ""
  serviceMetadata:
    consoleServiceAnnotations: {}
    consoleServiceLabels: {}
    minioServiceAnnotations: {}
    minioServiceLabels: {}
  subPath: ""
  users:
  - name: storage-user
